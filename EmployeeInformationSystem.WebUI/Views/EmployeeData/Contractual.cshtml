@model EmployeeInformationSystem.Core.ViewModels.DataViewModel

@{
    Layout = null;
}
<style>
    .stepwizard-step p {
        margin-top: 10px;
    }

    .stepwizard-row {
        display: table-row;
    }

    .stepwizard {
        display: table;
        width: 50%;
        position: relative;
    }

    .stepwizard-step button[disabled] {
        opacity: 1 !important;
        filter: alpha(opacity=100) !important;
    }

    .stepwizard-row:before {
        top: 14px;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 100%;
        height: 1px;
        background-color: #ccc;
        /*z-order: 0;*/
    }

    .stepwizard-step {
        display: table-cell;
        text-align: center;
        position: relative;
    }

    .btn-circle {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.428571429;
        border-radius: 15px;
    }
</style>

<div class="card-body" id="formContent">
    <div class="row justify-content-md-center">
        <div class="stepwizard col-md-offset-3">
            <div class="stepwizard-row setup-panel">
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-primary btn-circle" data-btnParent="#personalDetails" disabled>1</button>
                    <p>Personal Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#contactDetails" disabled>2</button>
                    <p>Contact Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#professionalDetails" disabled>3</button>
                    <p>Professional Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#postingDetails" disabled>4</button>
                    <p>Posting Details</p>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm(ViewBag.Mode == "Add" ? "AjaxAdd" : "AjaxEdit", "EmployeeData", FormMethod.Post, new { encType = "multipart/form-data", @class = "form-horizontal", @id = "contractualForm" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.EmployeeDetails.Id, new { Value = @Model.EmployeeDetails.Id })
        @Html.HiddenFor(model => model.EmployeeDetails.CreatedAt, new { Value = @Model.EmployeeDetails.CreatedAt.ToString() })

        <!-- id will be unique, but class name will be same -->
<div id="personalDetails" class="setup-content">
    <div class="card-header d-flex">
        <h3 class="h4">Personal Details</h3>
    </div>
    <br />
    <!--  All fields pertaining to Personal information will be here with next button -->

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.EmployeeCode, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.EmployeeCode, new { htmlAttributes = new { @class = "form-control requiredField" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmployeeCode, "", new { @class = "text-danger" })
        </div>

        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.EmployeeType, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.DropDownListFor(model => model.EmployeeDetails.EmployeeType, new SelectList(Model.EmployeeType, "Value", "Text"), new { @class = "form-control requiredField" })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmployeeType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="line"></div>
    <div class="form-group row">
        <div class="col-sm-1" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.Title, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-1">
            @Html.EditorFor(model => model.EmployeeDetails.Title, new { htmlAttributes = new { @class = "form-control requiredField", @list = "TitleList" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.Title, "", new { @class = "text-danger" })
            <datalist id="TitleList">
                <option>Mr.</option>
                <option>Mrs.</option>
                <option>Dr.</option>
            </datalist>
        </div>

        <div class="col-sm-2" style="text-align:center;">
            @Html.LabelFor(model => model.EmployeeDetails.FirstName, htmlAttributes: new { @class = "form-control-label" })
            <p class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</p>
        </div>
        <div class="col-sm-2">
            @Html.EditorFor(model => model.EmployeeDetails.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.FirstName, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.MiddleName, htmlAttributes: new { @class = "form-control-label col-sm-1", @style = "text-align:center;" })
        <div class="col-sm-2">
            @Html.EditorFor(model => model.EmployeeDetails.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.MiddleName, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.LastName, htmlAttributes: new { @class = "form-control-label col-sm-1", @style = "text-align:center;" })
        <div class="col-sm-2">
            @Html.EditorFor(model => model.EmployeeDetails.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.LastName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.DateOfBirth, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.DateOfBirth, new { htmlAttributes = new { @class = "form-control requiredFieldDate", @type = "text", @data_type = "date" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.DateOfBirth, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.DateOfSuperannuation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.DateOfSuperannuation, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.DateOfSuperannuation, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.MaritalStatus, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.RadioButtonFor(model => model.EmployeeDetails.MaritalStatus, EmployeeInformationSystem.Core.Models.MaritalStatus.Married, new { @class = "radio-template requiredField", @id = "MaritalStatus_Married" }) Married&nbsp;&nbsp;
            @Html.RadioButtonFor(model => model.EmployeeDetails.MaritalStatus, EmployeeInformationSystem.Core.Models.MaritalStatus.Single, new { @class = "radio-template requiredField", @id = "MaritalStatus_Single" }) Single&nbsp;&nbsp;
            @Html.RadioButtonFor(model => model.EmployeeDetails.MaritalStatus, EmployeeInformationSystem.Core.Models.MaritalStatus.Others, new { @class = "radio-template requiredField", @id = "MaritalStatus_Others" }) Others
            @Html.ValidationMessageFor(model => model.EmployeeDetails.MaritalStatus, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.MarriageDate, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.MarriageDate, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date", @disabled = "disabled" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.MarriageDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.Gender, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.RadioButtonFor(model => model.EmployeeDetails.Gender, EmployeeInformationSystem.Core.Models.Gender.Male, new { @class = "radio-template requiredField", @id = "Gender_Male" }) Male&nbsp;&nbsp;
            @Html.RadioButtonFor(model => model.EmployeeDetails.Gender, EmployeeInformationSystem.Core.Models.Gender.Female, new { @class = "radio-template requiredField", @id = "Gender_Female" }) Female
            @Html.ValidationMessageFor(model => model.EmployeeDetails.Gender, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.ProfilePhoto, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            <input type="file" id="file" name="file" class="form-control-file" />
            @Html.ValidationMessageFor(model => model.EmployeeDetails.ProfilePhoto, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="line"></div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.BloodGroup, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.EmployeeDetails.BloodGroup, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.BloodGroup, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.VehicleType, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.VehicleType, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.VehicleType, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.VehicleCategory, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.EmployeeDetails.VehicleCategory, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.VehicleCategory, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.VehicleNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.VehicleNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.VehicleNumber, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.UANNumber, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.UANNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.UANNumber, "", new { @class = "text-danger" })
        </div>

        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.DeputedLocation, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.EmployeeDetails.DeputedLocation, new { @class = "form-control requiredField" })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.DeputedLocation, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>


    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.PANNumber, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.PANNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.PANNumber, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.AadhaarNumber, htmlAttributes: new { @class = "form-control-label" })
            <!--<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>-->
        </div>
        <div class="col-sm-1">
            @Html.EditorFor(model => model.AadhaarPart1, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
        </div>
        <div class="col-sm-1">
            @Html.EditorFor(model => model.AadhaarPart2, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
        </div>
        <div class="col-sm-1">
            @Html.EditorFor(model => model.AadhaarPart3, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.PANNumber, "", new { @class = "text-danger" })
        </div>

    </div>
    <div class="line"></div>


    <div class="form-group row justify-content-center">
        <div class="col-sm-10">
            <h3 class="h4">Dependent Details</h3>
            <div class="table-responsive">
                <table class="table table-hover" id="dependentTable">
                    <thead>
                        <tr>
                            <th>Name<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                            <th>Date of Birth</th>
                            <th>Relationship<p class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</p></th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.DependentDetails != null)
                        {
                            for (int i = 0; i < Model.DependentDetails.Count(); i++)
                            {
                                <tr id="dependentRow@(i)">
                                    <td>
                                        @Html.HiddenFor(model => model.DependentDetails[i].Id, new { Value = Model.DependentDetails[i].Id })
                                        @Html.HiddenFor(model => model.DependentDetails[i].CreatedAt, new { Value = Model.DependentDetails[i].CreatedAt.ToString() })
                                        @Html.HiddenFor(model => model.DependentDetails[i].EmployeeId, new { Value = @Model.EmployeeDetails.Id, @class = "requiredField" })
                                        @Html.EditorFor(model => model.DependentDetails[i].DependentName, new { htmlAttributes = new { @class = "form-control required" } })
                                    </td>
                                    <td>@Html.EditorFor(model => model.DependentDetails[i].DateofBirth, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                    <td>@Html.EditorFor(model => model.DependentDetails[i].Relationship, new { htmlAttributes = new { @class = "form-control required" } })</td>
                                    <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#dependentRow@(i)">Delete</button></td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success float-right" id="addDependent"><span class="fa fa-plus"></span>  Add dependent</button>
            </div>
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row justify-content-center">
        <!-- open1 is given in the class that is binded with the click event -->
        <button class="btn btn-info nextBtn" type="button" data-next="#contactDetails" data-parent="#personalDetails">Next <span class="fa fa-arrow-right"></span></button>
    </div>

</div>

        <!-- id will be unique, but class name will be same -->
<div id="contactDetails" class="setup-content">
    <div class="card-header d-flex">
        <h3 class="h4">Contact Details</h3>
    </div>
    <br />
    <!--  User's contact Details will be here with next and previous button -->
    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.EmailID, htmlAttributes: new { @class = "form-control-label" })
            <!--<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>-->
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.EmailID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmailID, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.AlternateEmailID, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.AlternateEmailID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.AlternateEmailID, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        <div class="col-sm-3" style="text-align:right;">
            @Html.LabelFor(model => model.EmployeeDetails.MobileNumber, htmlAttributes: new { @class = "form-control-label" })
            <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
        </div>
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.MobileNumber, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.ResidenceNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.ResidenceNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.ResidenceNumber, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.ResidenceAddress, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.ResidenceAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.ResidenceAddress, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.PermanentAddress, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.PermanentAddress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.PermanentAddress, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.EmergencyPerson, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.EmergencyPerson, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmergencyPerson, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.EmployeeDetails.EmergencyContact, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.EmergencyContact, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmergencyContact, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.EmergencyRelation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EditorFor(model => model.EmployeeDetails.EmergencyRelation, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.EmergencyRelation, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row">
        @Html.LabelFor(model => model.EmployeeDetails.SeatingLocation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.EnumDropDownListFor(model => model.EmployeeDetails.SeatingLocation, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EmployeeDetails.SeatingLocation, "", new { @class = "text-danger" })
        </div>

        @Html.LabelFor(model => model.TelephoneExtensions.Number, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
        <div class="col-sm-3">
            @Html.HiddenFor(model => model.TelephoneExtensions.EmployeeId, new { Value = @Model.EmployeeDetails.Id })
            @Html.EditorFor(model => model.TelephoneExtensions.Number, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TelephoneExtensions.Number, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="line"></div>

    <div class="form-group row justify-content-center">
        <!-- back2 unique class name  -->
        <button class="btn btn-warning nextBtn" type="button" data-next="#personalDetails" data-parent="#contactDetails"><span class="fa fa-arrow-left"></span> Back</button>&nbsp;&nbsp;&nbsp;
        <!-- open2 unique class name -->
        <button class="btn btn-info nextBtn" type="button" data-next="#professionalDetails" data-parent="#contactDetails">Next <span class="fa fa-arrow-right"></span></button>
    </div>
</div>

        <!-- id will be unique, but class name will be same -->
        <div id="professionalDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Professional Details</h3>
            </div>
            <br />
            <!--  password and confirm password field will be here with submit and previous button -->

            <div class="form-group row">
                <div class="col-sm-3" style="text-align:right;">
                    @Html.LabelFor(model => model.EmployeeDetails.WorkingStatus, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.RadioButtonFor(model => model.EmployeeDetails.WorkingStatus, true, new { @class = "radio-template requiredField", @id = "WorkingStatus_True" }) Working&nbsp;&nbsp;
                    @Html.RadioButtonFor(model => model.EmployeeDetails.WorkingStatus, false, new { @class = "radio-template requiredField", @id = "WorkingStatus_False" }) Separated
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.WorkingStatus, "", new { @class = "text-danger" })
                </div>

                <div class="col-sm-3" style="text-align:right;">
                    @Html.LabelFor(model => model.EmployeeDetails.Organisation, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.EmployeeDetails.OrganisationId, new SelectList(Model.Organisations, "Id", "Name"), new { @class = "form-control requiredField" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.OrganisationId, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Qualification Details</h3>
                    <div class="table" style="overflow-x:scroll;">
                        <table class="table table-hover" id="qualificationTable">
                            <thead>
                                <tr>
                                    <th style="min-width:150px;" class="text-center">Degree<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                                    <th class="text-center">Subject/Specialization</th>
                                    <th class="text-center">Grade/Percentage</th>
                                    <th style="min-width:100px;" class="text-center">Class</th>
                                    <th style="min-width:150px;" class="text-center">Institute</th>
                                    <th style="min-width:150px;" class="text-center">University</th>
                                    <th style="min-width:100px;" class="text-center">Duration</th>
                                    <th style="min-width:150px;" class="text-center">From</th>
                                    <th style="min-width:100px;" class="text-center">To</th>
                                    <th style="min-width:100px;" class="text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.QualificationDetails != null)
                                {
                                    for (int i = 0; i < Model.QualificationDetails.Count(); i++)
                                    {
                                        <tr id="qualificationRow@(i)">
                                            <td>
                                                @Html.HiddenFor(model => model.QualificationDetails[i].Id, new { Value = Model.QualificationDetails[i].Id })
                                                @Html.HiddenFor(model => model.QualificationDetails[i].CreatedAt, new { Value = Model.QualificationDetails[i].CreatedAt.ToString() })
                                                @Html.HiddenFor(model => model.QualificationDetails[i].EmployeeId, new { Value = Model.EmployeeDetails.Id, @class = "requiredField" })
                                                @Html.DropDownListFor(model => model.QualificationDetails[i].DegreeId, new SelectList(Model.Degrees, "Id", "Name", Model.QualificationDetails[i].DegreeId), new { @class = "form-control requiredField" })
                                            </td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].Specialization, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].Grade, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].Class, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].Institution, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].University, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].Duration, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].From, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td>@Html.EditorFor(model => model.QualificationDetails[i].To, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#qualificationRow@(i)">Delete</button></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addQualification"><span class="fa fa-plus"></span>  Add Qualification</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>

            <!-- Parent Org Dates removed-->

            <div class="form-group row">
                <div class="col-sm-3" style="text-align:right;">
                    @Html.LabelFor(model => model.EmployeeDetails.DateofJoiningDGH, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateofJoiningDGH, new { htmlAttributes = new { @class = "form-control requiredFieldDate", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateofJoiningDGH, "", new { @class = "text-danger" })
                </div>

                <div class="col-sm-3 form-control-label" style="text-align:right;">
                    <text style="font-weight:bold;display:inline;">Job / </text>@Html.LabelFor(model => model.EmployeeDetails.PrimaryExpertise, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.PrimaryExpertise, new { htmlAttributes = new { @class = "form-control requiredField" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PrimaryExpertise, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.DateofLeavingDGH, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateofLeavingDGH, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateofLeavingDGH, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.ReasonForLeaving, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EmployeeDetails.ReasonForLeaving, new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.ReasonForLeaving, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- back3 unique class name  -->
                <button class="btn btn-warning nextBtn" type="button" data-next="#contactDetails" data-parent="#professionalDetails"><span class="fa fa-arrow-left"></span> Back</button>&nbsp;&nbsp;&nbsp;
                <!-- open3 unique class name -->
                <button class="btn btn-info nextBtn" type="button" data-next="#postingDetails" data-parent="#professionalDetails">Next <span class="fa fa-arrow-right"></span></button>
            </div>

        </div>

        <!-- id will be unique, but class name will be same -->
        <div id="postingDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Posting Details</h3>
            </div>
            <br />

            <!-- Promotion Details removed-->

            <div class="form-group row">
                @Html.HiddenFor(model => model.PromotionDetails[0].EmployeeId, new { Value = Model.EmployeeDetails.Id })
                <div class="col-sm-3" style="text-align:right;">
                    @Html.LabelFor(model => model.PromotionDetails[0].Designation, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.PromotionDetails[0].DesignationId, new SelectList(Model.Designations, "Id", "Name"), new { @class = "form-control requiredField" })
                    @Html.ValidationMessageFor(model => model.PromotionDetails[0].DesignationId, "", new { @class = "text-danger" })
                </div>

                <div class="col-sm-3" style="text-align:right;">
                    @Html.LabelFor(model => model.PromotionDetails[0].PayScale, htmlAttributes: new { @class = "form-control-label" })
                    <text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text>
                </div>
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.PromotionDetails[0].PayScaleId, new SelectList(Model.PayScales, "Id", "Scale"), new { @class = "form-control requiredField" })
                    @Html.ValidationMessageFor(model => model.PromotionDetails[0].PayScaleId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Previous Experience Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="experienceTable">
                            <thead>
                                <tr>
                                    <th>Name of Organisation<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                                    <th>Position<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                                    <th>Compensation</th>
                                    <th>Location</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PastExperiences != null)
                                {
                                    for (int i = 0; i < Model.PastExperiences.Count(); i++)
                                    {
                                        <tr id="experienceRow@(i)">
                                            <td>
                                                @Html.HiddenFor(model => model.PastExperiences[i].Id, new { Value = Model.PastExperiences[i].Id })
                                                @Html.HiddenFor(model => model.PastExperiences[i].CreatedAt, new { Value = Model.PastExperiences[i].CreatedAt.ToString() })
                                                @Html.HiddenFor(model => model.PastExperiences[i].EmployeeId, new { Value = Model.EmployeeDetails.Id, @class = "requiredField" })
                                                @Html.EditorFor(model => model.PastExperiences[i].Organisation, new { htmlAttributes = new { @class = "form-control requiredField" } })
                                            </td>
                                            <td>@Html.EditorFor(model => model.PastExperiences[i].Position, new { htmlAttributes = new { @class = "form-control requiredField" } })</td>
                                            <td>@Html.EditorFor(model => model.PastExperiences[i].Compensation, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.PastExperiences[i].Location, new { htmlAttributes = new { @class = "form-control" } })</td>
                                            <td>@Html.EditorFor(model => model.PastExperiences[i].From, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td>@Html.EditorFor(model => model.PastExperiences[i].To, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#experienceRow@(i)">Delete</button></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addExperience"><span class="fa fa-plus"></span>  Add Experience</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Posting Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="postingTable">
                            <thead>
                                <tr>
                                    <th>Department<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                                    <th>Reporting<text class="form-control-label" style="font-weight:bold;color:red;display:inline;">*</text></th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PostingDetails != null)
                                {
                                    for (int i = 0; i < Model.PostingDetails.Count(); i++)
                                    {
                                        <tr id="postingRow@(i)">
                                            <td>
                                                @Html.HiddenFor(model => model.PostingDetails[i].Id, new { Value = Model.PostingDetails[i].Id })
                                                @Html.HiddenFor(model => model.PostingDetails[i].CreatedAt, new { Value = Model.PostingDetails[i].CreatedAt.ToString() })
                                                @Html.HiddenFor(model => model.PostingDetails[i].EmployeeId, new { Value = Model.EmployeeDetails.Id, @class = "requiredField" })
                                                @Html.DropDownListFor(model => model.PostingDetails[i].DepartmentId, new SelectList(Model.Departments, "Id", "Name", Model.PostingDetails[i].DepartmentId), new { @class = "form-control requiredField" })
                                            </td>
                                            <td>@Html.EditorFor(model => model.PostingDetails[i].Reporting, new { htmlAttributes = new { @class = "form-control requiredField"} })</td>
                                            <td>@Html.EditorFor(model => model.PostingDetails[i].From, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td>@Html.EditorFor(model => model.PostingDetails[i].To, new { htmlAttributes = new { @class = "form-control FieldDate", @type = "text", @data_type = "date" } })</td>
                                            <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#postingRow@(i)">Delete</button></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addPosting"><span class="fa fa-plus"></span>  Add Posting</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>



            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.CurrentBasicPay, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.CurrentBasicPay, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.CurrentBasicPay, "", new { @class = "text-danger" })
                </div>
                @*Filter Levels on basis of DGH ---> Done in Controller*@
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- Unique class name -->
                <button class="btn btn-warning nextBtn" type="button" data-next="#professionalDetails" data-parent="#postingDetails"><span class="fa fa-arrow-left"></span> Back</button> &nbsp;&nbsp;&nbsp;
                <!-- Unique class name -->
                <button class="btn btn-primary" type="button" id="finalSubmit">Submit</button>
                <!--<img src="spinner.gif" alt="" id="loader" style="display: none">-->
            </div>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        //Adding Datepicker for date inputs
        $('[data-type="date"]').each(function () {
            $(this).datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            });
        });

        // Load time actions
        $("#contactDetails").hide();
        $("#professionalDetails").hide();
        $("#postingDetails").hide();
        $("#@Html.IdFor(model => model.EmployeeDetails.DeputedLocation)").children('option[value=""]').remove();
        $("#@Html.IdFor(model => model.EmployeeDetails.DeputedLocation)").prepend('<option value="">--Select Deputed Location--</option>').find('option[value="@Html.ValueFor(model => model.EmployeeDetails.DeputedLocation)"]').attr('selected', 'selected');
        $("#@Html.IdFor(model => model.EmployeeDetails.OrganisationId)").prepend('<option value="">--Select Organisation--</option>').find('option[value="@Html.ValueFor(model => model.EmployeeDetails.OrganisationId)"]').attr('selected', 'selected');
        $("#@Html.IdFor(model => model.PromotionDetails[0].DesignationId)").prepend('<option value="">--Select Designation--</option>').find('option[value="@Html.ValueFor(model => model.PromotionDetails[0].DesignationId)"]').attr('selected', 'selected');
        $("#@Html.IdFor(model => model.PromotionDetails[0].PayScaleId)").prepend('<option value="">--Select PayScale--</option>').find('option[value="@Html.ValueFor(model => model.PromotionDetails[0].PayScaleId)"]').attr('selected', 'selected');
        $("#@Html.IdFor(model => model.EmployeeDetails.DisciplineId)").prepend('<option value="">--Select Discipline--</option>').find('option[value="@Html.ValueFor(model => model.EmployeeDetails.DisciplineId)"]').attr('selected', 'selected');
        $("#@Html.IdFor(model => model.EmployeeDetails.LevelId)").prepend('<option value="">--Select DGH Level--</option>').find('option[value="@Html.ValueFor(model => model.EmployeeDetails.LevelId)"]').attr('selected', 'selected');
        sessionStorage.clear();
        $('#overlay').fadeOut();

        // Custom validators for jQuery Validation
        $.validator.addMethod("australianDate",function(value, element) {
            // RegEx Match
            return value.match(/^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$|^$/);
            },
            "Please enter a date in the format dd-mm-yyyy."
        );
        $.validator.addMethod("indianPAN",function(value, element) {
            // RegEx Match
            return value.match(/[a-zA-Z]{3}[PCHFATBLJG]{1}[a-zA-Z]{1}[0-9]{4}[a-zA-Z]{1}$|^$/);
            },
            "Please enter a valid PAN"
        );
		// Accept a value from a file input based on a required mimetype
		$.validator.addMethod( "accept", function( value, element, param ) {

			// Split mime on commas in case we have multiple types we can accept
			var typeParam = typeof param === "string" ? param.replace( /\s/g, "" ) : "image/*",
				optionalValue = this.optional( element ),
				i, file, regex;

			// Element is optional
			if ( optionalValue ) {
				return optionalValue;
			}

			if ( $( element ).attr( "type" ) === "file" ) {

				// Escape string to be used in the regex
				// see: https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
				// Escape also "/*" as "/.*" as a wildcard
				typeParam = typeParam
						.replace( /[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&" )
						.replace( /,/g, "|" )
						.replace( /\/\*/g, "/.*" );

				// Check if the element has a FileList before checking each file
				if ( element.files && element.files.length ) {
					regex = new RegExp( ".?(" + typeParam + ")$", "i" );
					for ( i = 0; i < element.files.length; i++ ) {
						file = element.files[ i ];

						// Grab the mimetype from the loaded file, verify it matches
						if ( !file.type.match( regex ) ) {
							return false;
						}
					}
				}
			}

			// Either return true because we've validated each file, or because the
			// browser does not support element.files and the FileList feature
			return true;
		}, $.validator.format( "Please enter a file with vaild MIME Type" ) );

        //Check for filesize limit
        $.validator.addMethod('filesize', function (value, element, arg) {
            if (element.files[0] != null) {
                if (element.files[0].size <= arg) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        },
            jQuery.validator.format("Please enter the file smaller than {0} KB")
        );

        //jQuery Validation on the form
        var v = $("#contractualForm").validate({
            rules: {
                '@Html.NameFor(model => model.EmployeeDetails.FirstName)': {
                    required: true,
                    minlength: 2
                },
                'file': {
                    required: false,
                    accept: "image/*",
                    filesize: 500000
                },
                '@Html.NameFor(model => model.EmployeeDetails.UANNumber)': {
                    required: true,
                    digits: true,
                    minlength: 12,
                    maxlength: 12
                },
                '@Html.NameFor(model => model.EmployeeDetails.PANNumber)': {
                    indianPAN: true,
                    required: true
                    },
                '@Html.NameFor(model => model.AadhaarPart1)': {
                    digits: true,
                    minlength: 4,
                    maxlength: 4
                },
                '@Html.NameFor(model => model.AadhaarPart2)': {
                    digits: true,
                    minlength: 4,
                    maxlength: 4
                },
                '@Html.NameFor(model => model.AadhaarPart3)': {
                    digits: true,
                    minlength: 4,
                    maxlength: 4
                },
                '@Html.NameFor(model => model.EmployeeDetails.EmailID)':  {
                    email: true,
                },
                 '@Html.NameFor(model => model.EmployeeDetails.AlternateEmailID)':  {
                    email: true
                },
                '@Html.NameFor(model => model.EmployeeDetails.MobileNumber)':  {
                    required:true,
                    digits: true,
                    minlength: 10,
                    maxlength: 10
                },
                '@Html.NameFor(model => model.EmployeeDetails.ResidenceNumber)':  {
                    digits: true
                },
                '@Html.NameFor(model => model.EmployeeDetails.EmergencyContact)':  {
                    digits: true
                },
                '@Html.NameFor(model => model.TelephoneExtensions.Number)':  {
                    digits: true,
                    maxlength: 4,
                    minlength: 4
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateofLeavingDGH)':  {
                    required: function(element) {
                        return $("input:radio[name='@Html.NameFor(model => model.EmployeeDetails.WorkingStatus)']:checked").val() == 'False';
                        },
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.ReasonForLeaving)':  {
                    required: function(element) {
                        return $("input:radio[name='@Html.NameFor(model => model.EmployeeDetails.WorkingStatus)']:checked").val() == 'False';
                        }
                }
            },
            messages: {
                'file': {
                    accept: "Please select a valid image file",
                    filesize: "File should be smaller than 500KB"
                }
            },
            errorClass: 'invalid-feedback',
            errorElement: 'div',
            errorPlacement: function(error, element) {
                error.insertAfter(element);
            },
            highlight: function(element) {
				$(element).addClass("is-invalid");
			},
            unhighlight: function(element) {
				$(element).removeClass("is-invalid");
			}
        });

        //Custom Rules based on class
        $.validator.addClassRules({
             requiredField: {
                    required: true
            },
             requiredFieldDate: {
                    required: true,
                    australianDate :true
            },
            FieldDate: {
                australianDate :true
            }
        });

        // Binding next button to form div
        $(".nextBtn").click(function() {
            var parent = $(this).attr("data-parent");
            var nextItem = $(this).attr("data-next");
            if (v.form()) {
                AnimateObjects(parent, nextItem);
            }
            else {
               return;
            }
        });

        //Showing the correct div based on click of top icons
        $("[data-btnParent]").click(function () {
            var parent = $(".btn-primary[data-btnParent]").attr("data-btnParent");
            var nextItem = $(this).attr("data-btnParent");
            if (v.form()) {
                AnimateObjects(parent, nextItem);
            }
            else {
               return;
            }
        });

        //Common function to animate div flow
        function AnimateObjects(parent, nextItem) {
            var nextButton = '[data-btnParent="' + nextItem + '"]';
            var currentButton = '[data-btnParent="' + parent + '"]';
            $(currentButton).removeClass("btn-primary").addClass("btn-success").removeAttr("disabled");
            $(nextButton).removeClass("btn-success btn-default").addClass("btn-primary");
            $(parent).hide();
            $(nextItem).show();
            $("html, body").animate({ scrollTop: 0 }, "slow");
        }

        // Button Click Methods

        //Add new row to Dependent table
        $("#addDependent").click(function () {
            if (sessionStorage.dependentCount) {
                sessionStorage.dependentCount = Number(sessionStorage.dependentCount) + 1;
            } else {
                sessionStorage.dependentCount = @((Model.DependentDetails == null) ? 0 : Model.DependentDetails.Count());
            }
            var newDependent = sessionStorage.dependentCount;
            var rowHtml = '<tr id="dependentRow' + newDependent + '"> \
                           <td><input value="@Model.EmployeeDetails.Id" id="DependentDetails_' + newDependent + '__EmployeeId" name="DependentDetails[' + newDependent + '].EmployeeId" type="hidden" class="requiredField"> \
                           <input class="form-control text-box single-line" data-val="true" data-val-required="Valid Dependent Name is required" id="DependentDetails_' + newDependent + '__DependentName" name="DependentDetails[' + newDependent + '].DependentName" type="text" value="" ></td> \
                           <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Date of Birth must be a date." id="DependentDetails_' + newDependent + '__DateofBirth" name="DependentDetails[' + newDependent + '].DateofBirth" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="DependentDetails_' + newDependent + '__Relationship" name="DependentDetails[' + newDependent + '].Relationship" type="text" value=""></td> \
                           <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#dependentRow' + newDependent + '">Delete</button></td></tr>';
            $('#dependentTable tbody').append(rowHtml);
            $('#DependentDetails_' + newDependent + '__DateofBirth').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#DependentDetails_' + newDependent + '__DependentName').addClass("requiredField").rules('add',
                {
                    required: true,
                    minlength:2
                });
            $('#DependentDetails_' + newDependent + '__Relationship').addClass("requiredField").rules('add',
                {
                    required: true,
                    minlength:2
                });
        });

        //Add new row to Qualification table
        $("#addQualification").click(function () {
            if (sessionStorage.qualificationCount) {
                sessionStorage.qualificationCount = Number(sessionStorage.qualificationCount) + 1;
            } else {
                sessionStorage.qualificationCount = @((Model.QualificationDetails == null) ? 0 : Model.QualificationDetails.Count());
            }
            var newQualification = sessionStorage.qualificationCount;
            var degreeNames = '<option selected="selected" value="">Select Degree</option>';
            @if (Model.Degrees.Count() != 0)
            {
            foreach(var degree in Model.Degrees)
            {
            <text>
            degreeNames +='<option value="@degree.Id">@degree.Name</option>';
            </text>
            }
            }
            var rowHtml = '<tr id="qualificationRow' + newQualification + '"><td><input value="@Model.EmployeeDetails.Id" id="QualificationDetails_' + newQualification + '__EmployeeId" name="QualificationDetails[' + newQualification + '].EmployeeId" type="hidden" class="requiredField"> \
                           <select class="form-control" data-val="true" data-val-required="The Degree field is required." id="QualificationDetails_' + newQualification + '__DegreeId" name="QualificationDetails[' + newQualification + '].DegreeId">' + degreeNames + '</select></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Specialization" name="QualificationDetails[' + newQualification + '].Specialization" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Grade" name="QualificationDetails[' + newQualification + '].Grade" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Class" name="QualificationDetails[' + newQualification + '].Class" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Institution" name="QualificationDetails[' + newQualification + '].Institution" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__University" name="QualificationDetails[' + newQualification + '].University" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Duration" name="QualificationDetails[' + newQualification + '].Duration" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field From must be a date." id="QualificationDetails_' + newQualification + '__From" name="QualificationDetails[' + newQualification + '].From" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Date of Passing must be a date." id="QualificationDetails_' + newQualification + '__To" name="QualificationDetails[' + newQualification + '].To" type="text" value=""></td> \
                           <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#qualificationRow' + newQualification + '" data-nullifyitem="#QualificationDetails_' + newQualification + '__EmployeeId">Delete</button></td></tr>';
            $('#qualificationTable tbody').append(rowHtml);
            $('#QualificationDetails_' + newQualification + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#QualificationDetails_' + newQualification + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#QualificationDetails_' + newQualification + '__DegreeId').addClass("requiredField").rules('add',
                {
                    required: true
                });
        });

        //Add new row to Past Experience table
        $("#addExperience").click(function () {
            if (sessionStorage.experienceCount) {
                sessionStorage.experienceCount = Number(sessionStorage.experienceCount) + 1;
            } else {
                sessionStorage.experienceCount = @((Model.PastExperiences == null) ? 0 : Model.PastExperiences.Count());
            }
            var newExperience = sessionStorage.experienceCount;
             var rowHtml = '<tr id="experienceRow' + newExperience + '"> \
				            <td><input value="@Model.EmployeeDetails.Id" id="PastExperiences_' + newExperience + '__EmployeeId" name="PastExperiences[' + newExperience + '].EmployeeId" type="hidden" class="requiredField"> \
				            <input class="form-control text-box single-line" id="PastExperiences_' + newExperience + '__Organisation" name="PastExperiences[' + newExperience + '].Organisation" type="text" value=""></td> \
				            <td><input class="form-control text-box single-line" id="PastExperiences_' + newExperience + '__Position" name="PastExperiences[' + newExperience + '].Position" type="text" value=""></td> \
				            <td><input class="form-control text-box single-line" id="PastExperiences_' + newExperience + '__Compensation" name="PastExperiences[' + newExperience + '].Compensation" type="text" value=""></td> \
				            <td><input class="form-control text-box single-line" id="PastExperiences_' + newExperience + '__Location" name="PastExperiences[' + newExperience + '].Location" type="text" value=""></td> \
				            <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field From must be a date." id="PastExperiences_' + newExperience + '__From" name="PastExperiences[' + newExperience + '].From" type="text" value=""></td> \
				            <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Till must be a date." id="PastExperiences_' + newExperience + '__To" name="PastExperiences[' + newExperience + '].To" type="text" value=""></td> \
				            <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#experienceRow' + newExperience + '">Delete</button></td></tr>';
            $('#experienceTable tbody').append(rowHtml);
            $('#PastExperiences_' + newExperience + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PastExperiences_' + newExperience + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PastExperiences_' + newExperience + '__Organisation').addClass("requiredField").rules('add',
             {
                required: true
             });
             $('#PastExperiences_' + newExperience + '__Position').addClass("requiredField").rules('add',
             {
                required: true
             });
        });

        //Add new row to Posting table
        $("#addPosting").click(function () {
            if (sessionStorage.postingCount) {
                sessionStorage.postingCount = Number(sessionStorage.postingCount) + 1;
            } else {
                sessionStorage.postingCount = @((Model.PostingDetails == null) ? 0 : Model.PostingDetails.Count());
            }
            var newPosting = sessionStorage.postingCount;
            var departmentNames = '<option selected="selected" value="">Select Department</option>';
            @if (Model.Departments.Count() != 0)
            {
            foreach(var department in Model.Departments)
            {
            <text>
            departmentNames +='<option value="@department.Id">@department.Name</option>';
            </text>
            }
            }
            var rowHtml = '<tr id="postingRow' + newPosting + '"> \
                           <td><input value="@Model.EmployeeDetails.Id" id="PostingDetails_' + newPosting + '__EmployeeId" name="PostingDetails[' + newPosting + '].EmployeeId" type="hidden" class="requiredField"> \
                           <select class="form-control" id="PostingDetails_' + newPosting + '__DepartmentId" name="PostingDetails[' + newPosting + '].DepartmentId" style="width:100px;">' + departmentNames + '</select></td> \
                           <td><input class="form-control text-box single-line" id="PostingDetails_' + newPosting + '__Reporting" name="PostingDetails[' + newPosting + '].Reporting" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Posting From must be a date." id="PostingDetails_' + newPosting + '__From" name="PostingDetails[' + newPosting + '].From" type="text" value=""></td> \
                           <td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Posting Till must be a date." id="PostingDetails_' + newPosting + '__To" name="PostingDetails[' + newPosting + '].To" type="text" value=""></td> \
                           <td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#postingRow' + newPosting + '">Delete</button></td></tr>';
            $('#postingTable tbody').append(rowHtml);
            $('#PostingDetails_' + newPosting + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PostingDetails_' + newPosting + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd-mm-yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PostingDetails_' + newPosting + '__DepartmentId').addClass("requiredField").rules('add',
             {
                required: true
             });
             $('#PostingDetails_' + newPosting + '__Reporting').addClass("requiredField").rules('add',
             {
                required: true
             });
        });

        //Button click actions for dynamically generated buttons

        // Common function to delete row any dynamic table
        $(document).on('click', '.deleteRow', function () {
            var rowId = $(this).data("rowid");
            $(rowId).find('input.requiredField').each(function()
            {
                $(this).attr("value", "TBD");

            });
            $(rowId).find('select.requiredField').each(function()
            {
                $(this).find('option:selected').attr("value", "TBD").attr("selected", "selecteds");
            });
            $(rowId).hide();
        });

        // Activating marriage date based on Marital status
        $(document).on('change', 'input[type="radio"][name="@Html.NameFor(model=>model.EmployeeDetails.MaritalStatus)"]', function () {
             if (this.value == 'Married') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.MarriageDate)').removeAttr('disabled');
            }
             else {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.MarriageDate)').val(null).attr('disabled','disabled').removeClass("is-invalid");
            }
        });

        // Activate fields based on working status
        $(document).on('change', 'input[type="radio"][name="@Html.NameFor(model=>model.EmployeeDetails.WorkingStatus)"]', function () {
             if (this.value == 'False') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.DateofLeavingDGH)').removeAttr('disabled');
                 $('#@Html.IdFor(model=>model.EmployeeDetails.ReasonForLeaving)').removeAttr('disabled');
            }
             else if (this.value == 'True') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.DateofLeavingDGH)').val(null).attr('disabled', 'disabled').removeClass("is-invalid");
                  $('#@Html.IdFor(model=>model.EmployeeDetails.ReasonForLeaving)').val(null).attr('disabled','disabled').removeClass("is-invalid");
            }
         });

    // Form submission via AJAX
    $("#finalSubmit").click(function () {
      if (v.form()) {
        //  Show a loader image
          $('#overlay').fadeIn();
          if (0 == $("#@Html.IdFor(model => model.TelephoneExtensions.Number)").val()) {
              $("#@Html.IdFor(model => model.TelephoneExtensions.Number)").val(9999);
          }
          var formUrl = $('#contractualForm').attr('action');
          var formData = new FormData(document.getElementById('contractualForm'));
          $.ajax({
            url: formUrl,
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                if ('Success' == result) {
                    $('#formContent').html('<div class="alert alert-success" role="alert"> Successfully Added </div >');
                } else {
                    $('#formContent').html(result);
                }
            },
            error: function () {
                $('#formContent').html('<div class="alert alert-danger" role="alert"> An Error has occured </div >');
            },
            fail: function (xhr, textStatus, errorThrown) {
                $('#formContent').html('<div class="alert alert-danger" role="alert">Request Failed with error: ' + errorThrown + '</div > ');
            },
            complete: function () {
                        $('#overlay').fadeOut();
            }
          });
          //console.log($("#contractualForm").serialize());
          //$('#overlay').fadeOut();
      }
    });
});
</script>
