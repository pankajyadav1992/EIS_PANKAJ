@model EmployeeInformationSystem.Core.ViewModels.DataViewModel

@{
    Layout = null;
}
<style>
    .stepwizard-step p {
        margin-top: 10px;
    }

    .stepwizard-row {
        display: table-row;
    }

    .stepwizard {
        display: table;
        width: 50%;
        position: relative;
    }

    .stepwizard-step button[disabled] {
        opacity: 1 !important;
        filter: alpha(opacity=100) !important;
    }

    .stepwizard-row:before {
        top: 14px;
        bottom: 0;
        position: absolute;
        content: " ";
        width: 100%;
        height: 1px;
        background-color: #ccc;
        /*z-order: 0;*/
    }

    .stepwizard-step {
        display: table-cell;
        text-align: center;
        position: relative;
    }

    .btn-circle {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.428571429;
        border-radius: 15px;
    }
</style>

<div class="card-body" id="formContent">
    <div class="row justify-content-md-center">
        <div class="stepwizard col-md-offset-3">
            <div class="stepwizard-row setup-panel">
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-primary btn-circle" data-btnParent="#personalDetails" disabled>1</button>
                    <p>Personal Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#contactDetails" disabled>2</button>
                    <p>Contact Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#professionalDetails" disabled>3</button>
                    <p>Professional Details</p>
                </div>
                <div class="stepwizard-step">
                    <button type="button" class="btn btn-default btn-circle" data-btnParent="#postingDetails" disabled>4</button>
                    <p>Posting Details</p>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AjaxAdd", "EmployeeData", new { targetPage= "Deputationist" }, FormMethod.Post, new { @class = "form-horizontal", @id = "deputationistForm" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary()

        <!-- id will be unique, but class name will be same -->
        <div id="personalDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Personal Details</h3>
            </div>
            <br />
            <!--  All fields pertaining to Personal information will be here with next button -->

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.EmployeeCode, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.EmployeeCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.EmployeeCode, "", new { @class = "text-danger" })
                </div>


                @Html.LabelFor(model => model.EmployeeDetails.EmployeeType, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EmployeeType, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.EmployeeType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="line"></div>
            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.Title, htmlAttributes: new { @class = "col-sm-1 form-control-label" })
                <div class="col-sm-1">
                    @Html.EditorFor(model => model.EmployeeDetails.Title, new { htmlAttributes = new { @class = "form-control", @list = "TitleList" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.Title, "", new { @class = "text-danger" })
                    <datalist id="TitleList">
                        <option>Mr.</option>
                        <option>Mrs.</option>
                        <option>Dr.</option>
                    </datalist>
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.FirstName, htmlAttributes: new { @class = "col-sm-2 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.FirstName, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.LastName, htmlAttributes: new { @class = "col-sm-2 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.DateOfBirth, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateOfBirth, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateOfBirth, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.DateOfSuperannuation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateOfSuperannuation, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateOfSuperannuation, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.MaritalStatus, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.RadioButtonFor(model => model.EmployeeDetails.MaritalStatus, EmployeeInformationSystem.Core.Models.MaritalStatus.Married, new { @class = "radio-template", @id = "MaritalStatus_Married" }) Married&nbsp;&nbsp;
                    @Html.RadioButtonFor(model => model.EmployeeDetails.MaritalStatus, EmployeeInformationSystem.Core.Models.MaritalStatus.Single, new { @class = "radio-template", @id = "MaritalStatus_Single" }) Single
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.MaritalStatus, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.MarriageDate, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.MarriageDate, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.MarriageDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.Gender, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.RadioButtonFor(model => model.EmployeeDetails.Gender, EmployeeInformationSystem.Core.Models.Gender.Male, new { @class = "radio-template", @id = "Gender_Male" }) Male&nbsp;&nbsp;
                    @Html.RadioButtonFor(model => model.EmployeeDetails.Gender, EmployeeInformationSystem.Core.Models.Gender.Female, new { @class = "radio-template", @id = "Gender_Female" }) Female
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.Gender, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.EmployeeDetails.BloodGroup, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EmployeeDetails.BloodGroup, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.BloodGroup, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.VehicleNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.VehicleNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.VehicleNumber, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.EmployeeDetails.PassportNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.PassportNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PassportNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.PANNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.PANNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PANNumber, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.EmployeeDetails.AadhaarNumer, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-1">
                    @Html.EditorFor(model => model.AadhaarPart1, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
                </div>
                <div class="col-sm-1">
                    @Html.EditorFor(model => model.AadhaarPart2, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
                </div>
                <div class="col-sm-1">
                    @Html.EditorFor(model => model.AadhaarPart3, new { htmlAttributes = new { @class = "form-control", @maxlength = "4" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PANNumber, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="line"></div>


            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Dependent Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="dependentTable">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Date of Birth</th>
                                    <th>Relationship</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addDependent"><span class="fa fa-plus"></span>  Add dependent</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- open1 is given in the class that is binded with the click event -->
                <button class="btn btn-info nextBtn" type="button" data-next="#contactDetails" data-parent="#personalDetails">Next <span class="fa fa-arrow-right"></span></button>
            </div>

        </div>

        <!-- id will be unique, but class name will be same -->
        <div id="contactDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Contact Details</h3>
            </div>
            <br />
            <!--  User's contact Details will be here with next and previous button -->
            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.EmailID, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.EmailID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.EmailID, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.AlternateEmailID, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.AlternateEmailID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.AlternateEmailID, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.MobileNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.MobileNumber, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.ResidenceNumber, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.ResidenceNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.ResidenceNumber, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.ResidenceAddress, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.ResidenceAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.ResidenceAddress, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.PermanentAddress, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.PermanentAddress, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PermanentAddress, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.EmergencyPerson, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.EmergencyPerson, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.EmergencyPerson, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.EmergencyContact, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.EmergencyContact, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.EmergencyContact, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.SeatingLocation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EmployeeDetails.SeatingLocation, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.SeatingLocation, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.TelephoneExtensions.Number, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.HiddenFor(model=> model.TelephoneExtensions.EmployeeId, new { Value=@Model.EmployeeDetails.Id} )
                    @Html.EditorFor(model => model.TelephoneExtensions.Number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TelephoneExtensions.Number, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- back2 unique class name  -->
                <button class="btn btn-warning nextBtn" type="button" data-next="#personalDetails" data-parent="#contactDetails"><span class="fa fa-arrow-left"></span> Back</button>&nbsp;&nbsp;&nbsp;
                <!-- open2 unique class name -->
                <button class="btn btn-info nextBtn" type="button" data-next="#professionalDetails" data-parent="#contactDetails">Next <span class="fa fa-arrow-right"></span></button>
            </div>
        </div>

        <!-- id will be unique, but class name will be same -->
        <div id="professionalDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Professional Details</h3>
            </div>
            <br />
            <!--  password and confirm password field will be here with submit and previous button -->

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.WorkingStatus, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.RadioButtonFor(model => model.EmployeeDetails.WorkingStatus, true, new { @class = "radio-template", @id = "WorkingStatus_True" }) Working&nbsp;&nbsp;
                    @Html.RadioButtonFor(model => model.EmployeeDetails.WorkingStatus, false, new { @class = "radio-template", @id = "WorkingStatus_False" }) Separated
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.WorkingStatus, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.Organisation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.EmployeeDetails.OrganisationId, new SelectList(Model.Organisations, "Id", "Name"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.OrganisationId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Qualification Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="qualificationTable">
                            <thead>
                                <tr>
                                    <th>Degree</th>
                                    <th>Institute</th>
                                    <th>University</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addQualification"><span class="fa fa-plus"></span>  Add Qualification</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.PrimaryExpertise, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-6">
                    @Html.EditorFor(model => model.EmployeeDetails.PrimaryExpertise, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.PrimaryExpertise, "", new { @class = "text-danger" })
                </div>
                <!---Add support for PROFILE PHOTO-->

            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.DateofJoiningParentOrg, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateofJoiningParentOrg, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateofJoiningParentOrg, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.DateofRelievingLastOffice, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateofRelievingLastOffice, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateofRelievingLastOffice, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.DateofJoiningDGH, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateofJoiningDGH, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateofJoiningDGH, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.DeputationPeriod, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DeputationPeriod, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DeputationPeriod, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.DateOfSeparation, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.DateOfSeparation, new { htmlAttributes = new { @class = "form-control", @type = "text", @data_type = "date", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DateOfSeparation, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.EmployeeDetails.ReasonForLeaving, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EnumDropDownListFor(model => model.EmployeeDetails.ReasonForLeaving, new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.ReasonForLeaving, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- back3 unique class name  -->
                <button class="btn btn-warning nextBtn" type="button" data-next="#contactDetails" data-parent="#professionalDetails"><span class="fa fa-arrow-left"></span> Back</button>&nbsp;&nbsp;&nbsp;
                <!-- open3 unique class name -->
                <button class="btn btn-info nextBtn" type="button" data-next="#postingDetails" data-parent="#professionalDetails">Next <span class="fa fa-arrow-right"></span></button>
            </div>

        </div>

        <!-- id will be unique, but class name will be same -->
        <div id="postingDetails" class="setup-content">
            <div class="card-header d-flex">
                <h3 class="h4">Posting Details</h3>
            </div>
            <br />

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Promotion Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="promotionTable">
                            <thead>
                                <tr>
                                    <th>Designation</th>
                                    <th>PayScale</th>
                                    <th>Level</th>
                                    @* Filter Levels on Basis of Organisation*@
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addPromotion"><span class="fa fa-plus"></span>  Add Promotion</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <div class="col-sm-10">
                    <h3 class="h4">Posting Details</h3>
                    <div class="table-responsive">
                        <table class="table table-hover" id="postingTable">
                            <thead>
                                <tr>
                                    <th>Department</th>
                                    <th>Hod</th>
                                    <th>From</th>
                                    <th>To</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success float-right" id="addPosting"><span class="fa fa-plus"></span>  Add Posting</button>
                    </div>
                </div>
            </div>
            <div class="line"></div>



            <div class="form-group row">
                @Html.LabelFor(model => model.EmployeeDetails.CurrentBasicPay, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.EditorFor(model => model.EmployeeDetails.CurrentBasicPay, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.CurrentBasicPay, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.EmployeeDetails.DGHLevel, htmlAttributes: new { @class = "col-sm-3 form-control-label", @style = "text-align:right;" })
                <div class="col-sm-3">
                    @Html.DropDownListFor(model => model.EmployeeDetails.LevelId, new SelectList(Model.Levels, "Id", "Name"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeDetails.DGHLevel, "", new { @class = "text-danger" })
                </div>
                @*Filter Levels on basis of DGH*@
            </div>
            <div class="line"></div>

            <div class="form-group row justify-content-center">
                <!-- Unique class name -->
                <button class="btn btn-warning nextBtn" type="button" data-next="#professionalDetails" data-parent="#postingDetails"><span class="fa fa-arrow-left"></span> Back</button> &nbsp;&nbsp;&nbsp;
                <!-- Unique class name -->
                <button class="btn btn-primary" type="button" id="finalSubmit">Submit</button>
                <!--<img src="spinner.gif" alt="" id="loader" style="display: none">-->
            </div>
        </div>



        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*<div class="form-group row">
                <div class="col-sm-4 offset-sm-3">
                    <input type="submit" value="Submit" class="btn btn-primary" />
                </div>
            </div>*@
    }
</div>
<script>
    $(document).ready(function () {
        //Adding Datepicker for date inputs
        $('[data-type="date"]').each(function () {
            $(this).datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            });
        });

        // Load time actions
        $("#contactDetails").hide();
        $("#professionalDetails").hide();
        $("#postingDetails").hide();
        $("#@Html.IdFor(model => model.EmployeeDetails.OrganisationId)").prepend('<option selected="selected" value="">--Select Organisation--</option>');
        $("#@Html.IdFor(model => model.EmployeeDetails.DGHLevel)").prepend('<option selected="selected" value="">--Select DGH Level--</option>')
        sessionStorage.clear();
        $('#overlay').fadeOut();

        // Custom validators for jQuery Validation
        $.validator.addMethod("australianDate",function(value, element) {
            // RegEx Match
            return value.match(/^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$|^$/);
            },
            "Please enter a date in the format dd/mm/yyyy."
        );
        $.validator.addMethod("indianPAN",function(value, element) {
            // RegEx Match
            return value.match(/[a-zA-Z]{3}[PCHFATBLJG]{1}[a-zA-Z]{1}[0-9]{4}[a-zA-Z]{1}$/);
            },
            "Please enter a valid PAN"
        );
        $.validator.addMethod("indianPassport",function(value, element) {
            // RegEx Match
            return value.match(/^[A-Z]{1}[0-9]{7}$|^$/);
            },
            "Please enter a valid Passport number"
        );

        //jQuery Validation on the form
        var v = $("#deputationistForm").validate({
            rules: {
                '@Html.NameFor(model => model.EmployeeDetails.EmployeeCode)': {
                    required:true
                },
                '@Html.NameFor(model => model.EmployeeDetails.Title)': {
                    required:true
                },
                '@Html.NameFor(model => model.EmployeeDetails.LastName)': {
                    required: true,
                    minlength: 2
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateOfBirth)': {
                    required: true,
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateOfSuperannuation)': {
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.PANNumber)': {
                    indianPAN: true
                    },
                '@Html.NameFor(model => model.EmployeeDetails.PassportNumber)': {
                    indianPassport: true
                },
                '@Html.NameFor(model => model.AadhaarPart1)': {
                    digits: true,
                    required:true
                },
                '@Html.NameFor(model => model.AadhaarPart2)': {
                    digits: true,
                    required:true
                },
                '@Html.NameFor(model => model.AadhaarPart3)': {
                    digits: true,
                    required:true
                },
                '@Html.NameFor(model => model.EmployeeDetails.MarriageDate)':  {
                    australianDate :true,
                    required: function (element) {
                        return $("input:radio[name='@Html.NameFor(model=> model.EmployeeDetails.MaritalStatus)']:checked").val() == 'Married';
                        }
                },
                '@Html.NameFor(model => model.EmployeeDetails.EmailID)':  {
                    required: true,
                    email: true,
                },
                 '@Html.NameFor(model => model.EmployeeDetails.AlternateEmailID)':  {
                    email: true
                },
                '@Html.NameFor(model => model.EmployeeDetails.MobileNumber)':  {
                    required: true,
                    digits: true,
                    minlength: 10,
                    maxlength: 10
                },
                '@Html.NameFor(model => model.EmployeeDetails.ResidenceNumber)':  {
                    digits: true
                },
                '@Html.NameFor(model => model.EmployeeDetails.EmergencyContact)':  {
                    digits: true
                },
                '@Html.NameFor(model => model.TelephoneExtensions.Number)':  {
                    digits: true,
                    maxlength: 4,
                    minlength: 4
                },
                '@Html.NameFor(model => model.EmployeeDetails.OrganisationId)':  {
                    required: true
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateofJoiningDGH)':  {
                    required: true,
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateofJoiningParentOrg)':  {
                    required: true,
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateofRelievingLastOffice)':  {
                    required: true,
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.DateOfSeparation)':  {
                    required: function(element) {
                        return $("input:radio[name='@Html.NameFor(model=> model.EmployeeDetails.WorkingStatus)']:checked").val() == 'False';
                        },
                    australianDate :true
                },
                '@Html.NameFor(model => model.EmployeeDetails.ReasonForLeaving)':  {
                    required: function(element) {
                        return $("input:radio[name='@Html.NameFor(model=> model.EmployeeDetails.WorkingStatus)']:checked").val() == 'False';
                        }
                },
                '@Html.NameFor(model => model.EmployeeDetails.DGHLevel)': {
                    required: true
                }
            },
            messages: {
            '@Html.NameFor(model => model.AadhaarPart1)': {
                    required:"Required"
                },
             '@Html.NameFor(model => model.AadhaarPart2)': {
                    required:"Required"
                },
              '@Html.NameFor(model => model.AadhaarPart3)': {
                    required:"Required"
                },
            },
            errorClass: 'invalid-feedback',
            errorElement: 'div',
            errorPlacement: function(error, element) {
                error.insertAfter(element);
            },
            highlight: function(element) {
				$(element).addClass("is-invalid");
			},
            unhighlight: function(element) {
				$(element).removeClass("is-invalid");
			}
        });

        // Binding next button to form div
        $(".nextBtn").click(function() {
            var parent = $(this).attr("data-parent");
            var nextItem = $(this).attr("data-next");
            if (v.form()) {
                AnimateObjects(parent, nextItem);
            }
            else {
               return;
            }
        });

        //Showing the correct div based on click of top icons
        $("[data-btnParent]").click(function () {
            var parent = $(".btn-primary[data-btnParent]").attr("data-btnParent");
            var nextItem = $(this).attr("data-btnParent");
            if (v.form()) {
                AnimateObjects(parent, nextItem);
            }
            else {
               return;
            }
        });

        //Common function to animate div flow
        function AnimateObjects(parent, nextItem) {
            var nextButton = '[data-btnParent="' + nextItem + '"]';
            var currentButton = '[data-btnParent="' + parent + '"]';
            $(currentButton).removeClass("btn-primary").addClass("btn-success").removeAttr("disabled");
            $(nextButton).removeClass("btn-success btn-default").addClass("btn-primary");
            $(parent).hide();
            $(nextItem).show();
            $("html, body").animate({ scrollTop: 0 }, "slow");
        }

        // Button Click Methods

        //Add new row to Dependent table
        $("#addDependent").click(function () {
            if (sessionStorage.dependentCount) {
                sessionStorage.dependentCount = Number(sessionStorage.dependentCount) + 1;
            } else {
                sessionStorage.dependentCount = 0;
            }
            var newDependent = sessionStorage.dependentCount;
            var rowHtml = '<tr id="dependentRow' + newDependent + '"><td><input value="@Model.EmployeeDetails.Id" id="DependentDetails_' + newDependent + '__EmployeeId" name="DependentDetails[' + newDependent + '].EmployeeId" type="hidden"><input class="form-control text-box single-line" data-val="true" data-val-required="Valid Dependent Name is required" id="DependentDetails_' + newDependent + '__DependentName" name="DependentDetails[' + newDependent + '].DependentName" type="text" value="" ></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Date of Birth must be a date." id="DependentDetails_' + newDependent + '__DateofBirth" name="DependentDetails[' + newDependent + '].DateofBirth" type="text" value=""></td><td><input class="form-control text-box single-line" id="DependentDetails_' + newDependent + '__Relationship" name="DependentDetails[' + newDependent + '].Relationship" type="text" value=""></td><td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#dependentRow' + newDependent +'">Delete</button></td></tr>';
            $('#dependentTable tbody').append(rowHtml);
            $('#DependentDetails_' + newDependent + '__DateofBirth').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#DependentDetails_' + newDependent + '__DependentName').rules('add',
                {
                    required: true,
                    minlength:2
                });
            $('#DependentDetails_' + newDependent + '__Relationship').rules('add',
                {
                    required: true,
                    minlength:2
                });
        });

        //Add new row to Qualification table
        $("#addQualification").click(function () {
            if (sessionStorage.qualificationCount) {
                sessionStorage.qualificationCount = Number(sessionStorage.qualificationCount) + 1;
            } else {
                sessionStorage.qualificationCount = 0;
            }
            var newQualification = sessionStorage.qualificationCount;
            var degreeNames = '<option selected="selected" value="">Select Degree</option>';
            @if (Model.Degrees.Count() != 0)
            {
            foreach(var degree in Model.Degrees)
            {
            <text>
            degreeNames +='<option value="@degree.Id">@degree.Name</option>';
            </text>
            }
            }
            var rowHtml = '<tr id="qualificationRow' + newQualification + '"><td><input value="@Model.EmployeeDetails.Id" id="QualificationDetails_' + newQualification + '__EmployeeId" name="QualificationDetails[' + newQualification + '].EmployeeId" type="hidden"><select class="form-control" data-val="true" data-val-required="The Degree field is required." id="QualificationDetails_' + newQualification + '__DegreeId" name="QualificationDetails[' + newQualification + '].DegreeId" style="width:100px;">' + degreeNames + '</select></td><td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__Institution" name="QualificationDetails[' + newQualification + '].Institution" type="text" value=""></td><td><input class="form-control text-box single-line" id="QualificationDetails_' + newQualification + '__University" name="QualificationDetails[' + newQualification + '].University" type="text" value=""></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field From must be a date." id="QualificationDetails_' + newQualification + '__From" name="QualificationDetails[' + newQualification + '].From" type="text" value=""></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Date of Passing must be a date." id="QualificationDetails_' + newQualification + '__To" name="QualificationDetails[' + newQualification + '].To" type="text" value=""></td><td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#qualificationRow' + newQualification + '">Delete</button></td></tr>';
            $('#qualificationTable tbody').append(rowHtml);
            $('#QualificationDetails_' + newQualification + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#QualificationDetails_' + newQualification + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#QualificationDetails_' + newQualification + '__DegreeId').rules('add',
                {
                    required: true
                });
        });

        //Add new row to Posting table
        $("#addPosting").click(function () {
            if (sessionStorage.postingCount) {
                sessionStorage.postingCount = Number(sessionStorage.postingCount) + 1;
            } else {
                sessionStorage.postingCount = 0;
            }
            var newPosting = sessionStorage.postingCount;
            var departmentNames = '<option selected="selected" value="">Select Department</option>';
            var hodNames = '<option selected="selected" value="">Select HOD</option>';
            @if (Model.Departments.Count() != 0)
            {
            foreach(var department in Model.Departments)
            {
            <text>
            departmentNames +='<option value="@department.Id">@department.Name</option>';
            </text>
            }
            }
            @if (Model.HoDs.Count() != 0)
            {
            foreach(var hod in Model.HoDs)
            {
            <text>
            hodNames +='<option value="@hod.Id">@hod.Employee.FirstName' + ' @hod.Employee.LastName</option>';
            </text>
            }
            }
            var rowHtml = '<tr id="postingRow' + newPosting + '"><td><input value="@Model.EmployeeDetails.Id" id="PostingDetails_' + newPosting + '__EmployeeId" name="PostingDetails[' + newPosting + '].EmployeeId" type="hidden"><select class="form-control" id="PostingDetails_' + newPosting + '__DepartmentId" name="PostingDetails[' + newPosting + '].DepartmentId" style="width:100px;">' + departmentNames + '</select></td><td><select class="form-control" id="PostingDetails_' + newPosting + '__HODId" name="PostingDetails[' + newPosting + '].HODId" style="width:100px;">' + hodNames + '</select></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Posting From must be a date." id="PostingDetails_' + newPosting + '__From" name="PostingDetails[' + newPosting + '].From" type="text" value=""></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Posting Till must be a date." id="PostingDetails_' + newPosting + '__To" name="PostingDetails[' + newPosting + '].To" type="text" value=""></td><td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#postingRow' + newPosting + '">Delete</button></td></tr>';
            $('#postingTable tbody').append(rowHtml);
            $('#PostingDetails_' + newPosting + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PostingDetails_' + newPosting + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PostingDetails_' + newPosting + '__DepartmentId').rules('add',
             {
                required: true
             });
             $('#PostingDetails_' + newPosting + '__HODId').rules('add',
             {
                required: true
             });
        });

        //Add new row to Promotion table
        $("#addPromotion").click(function () {
            if (sessionStorage.promotionCount) {
                sessionStorage.promotionCount = Number(sessionStorage.promotionCount) + 1;
            } else {
                sessionStorage.promotionCount = 0;
            }
            var newPromotion = sessionStorage.promotionCount;
            var designationNames = '<option selected="selected" value="">Select Designation</option>';
            var levelNames = '<option selected="selected" value="">Select Level</option>';
            var payScaleNames = '<option selected="selected" value="">Select PayScale</option>';
            @if (Model.Designations.Count() != 0)
            {
            foreach(var designation in Model.Designations)
            {
            <text>
            designationNames +='<option value="@designation.Id">@designation.Name</option>';
            </text>
            }
            }
            @if (Model.Levels.Count() != 0)
            {
            foreach(var level in Model.Levels)
            {
            <text>
            levelNames +='<option value="@level.Id">@level.Name</option>';
            </text>
            }
            }
            @if (Model.PayScales.Count() != 0)
            {
            foreach(var payScale in Model.PayScales)
            {
            <text>
            payScaleNames += '<option value="@payScale.Id">@payScale.Scale</option>';
            </text>
            }
            }
            var rowHtml = '<tr id="promotionRow' + newPromotion + '"><td><input value="@Model.EmployeeDetails.Id" id="PromotionDetails_' + newPromotion + '__EmployeeId" name="PromotionDetails[' + newPromotion + '].EmployeeId" type="hidden"><select class="form-control" id="PromotionDetails_' + newPromotion + '__DesignationId" name="PromotionDetails[' + newPromotion + '].DesignationId" style="width:100px;">' + designationNames + '</select></td><td><select class="form-control" id="PromotionDetails_' + newPromotion + '__PayScaleId" name="PromotionDetails[' + newPromotion + '].PayScaleId" style="width:100px;">' + payScaleNames + '</select></td><td><select class="form-control" id="PromotionDetails_' + newPromotion + '__LevelId" name="PromotionDetails[' + newPromotion + '].LevelId" style="width:100px;">' + levelNames + '</select></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field Effective From must be a date." id="PromotionDetails_' + newPromotion + '__From" name="PromotionDetails[' + newPromotion + '].From" type="text" value=""></td><td><input class="form-control text-box single-line" data-val="true" data-val-date="The field To must be a date." id="PromotionDetails_' + newPromotion + '__To" name="PromotionDetails[' + newPromotion + '].To" type="text" value=""></td><td><button type="button" class="btn btn-outline-danger deleteRow" data-rowid="#promotionRow' + newPromotion + '">Delete</button></td></tr>';
            $('#promotionTable tbody').append(rowHtml);
            $('#PromotionDetails_' + newPromotion + '__From').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PromotionDetails_' + newPromotion + '__To').datepicker({
                uiLibrary: 'bootstrap',
                format: 'dd/mm/yyyy'
            }).rules('add',
                {
                    australianDate:true
                });
            $('#PromotionDetails_' + newPromotion + '__DesignationId').rules('add',
             {
                required: true
             });
        });


        //Button click actions for dynamically generated buttons

        // Common function to delete row any dynamic table
        $(document).on('click', '.deleteRow', function () {
            var rowId = $(this).attr("data-rowid");
            $(rowId).remove();
        });

        // Activating marriage date based on Marital status
        $(document).on('change', 'input[type="radio"][name="@Html.NameFor(model=>model.EmployeeDetails.MaritalStatus)"]', function () {
             if (this.value == 'Married') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.MarriageDate)').removeAttr('disabled');
            }
             else if (this.value == 'Single') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.MarriageDate)').val(null).attr('disabled','disabled');
            }
         });

        // Activate fields based on working status
        $(document).on('change', 'input[type="radio"][name="@Html.NameFor(model=>model.EmployeeDetails.WorkingStatus)"]', function () {
             if (this.value == 'False') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.DateOfSeparation)').removeAttr('disabled');
                 $('#@Html.IdFor(model=>model.EmployeeDetails.ReasonForLeaving)').removeAttr('disabled');
            }
             else if (this.value == 'True') {
                 $('#@Html.IdFor(model=>model.EmployeeDetails.DateOfSeparation)').val(null).attr('disabled', 'disabled');
                  $('#@Html.IdFor(model=>model.EmployeeDetails.ReasonForLeaving)').val(null).attr('disabled','disabled');
            }
         });


    // Form submission via AJAX
    $("#finalSubmit").click(function () {
      if (v.form()) {
        //  Show a loader image
          $('#overlay').fadeIn();
          var formUrl = $('#deputationistForm').attr('action');
          $.ajax({
            url: formUrl,
            type: 'POST',
            data: $('#deputationistForm').serialize(),
            success: function (result) {
                if ('Success' == result) {
                    $('#formContent').html('<div class="alert alert-success" role="alert"> Successfully Added </div >');
                } else {
                    $('#formContent').html(result);
                }
            },
            error: function () {
                $('#formContent').html('<div class="alert alert-danger" role="alert"> An Error has occured </div >');
            },
            fail: function (xhr, textStatus, errorThrown) {
                $('#formContent').html('<div class="alert alert-danger" role="alert">Request Failed with error: ' + errorThrown + '</div > ');
            }
          });
          //console.log($("#deputationistForm").serialize());
          $('#overlay').fadeOut();
      }
    });
});
</script>
